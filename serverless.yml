service: recipeappserverless


provider:
  name: aws
  runtime: nodejs12.x
  timeout: 30
  region: eu-west-1
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:*"
#      Resource: "arn:aws:s3:::recipe-app-photo-storage/*"


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
#    UploadBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: recipe-app-photo-storage
#        AccessControl: PublicRead
#        CorsConfiguration:
#          CorsRules:
#            - AllowedMethods:
#                - GET
#                - PUT
#                - POST
#                - HEAD
#              AllowedOrigins:
#                - "*"
#              AllowedHeaders:
#                - "*"


functions:


  getRecipe:
    handler: handler.getRecipe
    events:
      - http:
          path: recipes/{id}
          method: get
          cors: true


  getAllRecipes:
    handler: handler.getAllRecipes
    events:
      - http:
          path: recipes
          method: get
          cors: true

#  createRecipe:
#    handler: handler.createRecipe
#    events:
#      - http:
#          path: recipes
#          method: post
#          cors: true

  createRecipeAndIngredients:
    handler: handler.createRecipeAndIngredients
    events:
      - http:
          path: recipes
          method: post
          cors: true

  updateRecipe:
    handler: handler.updateRecipe
    events:
      - http:
          path: recipes/{id}
          method: put
          cors: true
  deleteRecipe:
    handler: handler.deleteRecipe
    events:
      - http:
          path: recipes/{id}
          method: delete
          cors: true

  getIngredient:
    handler: handler.getIngredient
    events:
      - http:
          path: ingredients/{id}
          method: get
          cors: true

  getAllIngredients:
    handler: handler.getAllIngredients
    events:
      - http:
          path: ingredients
          method: get
          cors: true

  createIngredient:
    handler: handler.createIngredient
    events:
      - http:
          path: ingredients
          method: post
          cors: true

  updateIngredient:
    handler: handler.updateIngredient
    events:
      - http:
          path: ingredients/{id}
          method: put
          cors: true

  deleteIngredient:
    handler: handler.deleteIngredient
    events:
      - http:
          path: ingredients/{id}
          method: delete
          cors: true

  getAllIngredientsByRecipeName:
    handler: handler.getAllIngredientsByRecipeName
    events:
      - http:
          path: ingredientsByRecipe/{name}
          method: get
          cors: true

#  requestUploadURL:
#    handler: handler.requestUploadURL
#    events:
#      - http:
#          path: requestUploadURL
#          method: post
#          cors: true





plugins:
  - serverless-offline


